{
  "version": "1.0.0",
  "lastUpdated": "2025-10-21T14:30:00.000Z",
  "compatibility": {
    "minNodeVersion": "16.0.0",
    "supportedPlatforms": ["React", "Next.js", "Vite", "Create React App"],
    "aiToolCompatibility": ["Cursor", "Lovable", "v0.dev", "Bolt", "Claude Code", "GitHub Copilot"]
  },
  "workingPrompts": {
    "basic": [
      "Add @ouroc/sdk subscription payments to my React app",
      "Create a SaaS pricing page using OuroC",
      "Implement crypto recurring payments without wallet requirement",
      "Add OuroC with email signup support"
    ],
    "advanced": [
      "Implement OuroC with Grid by Squads integration",
      "Create enterprise-grade subscription system with privacy features",
      "Add AI-to-agent payment capabilities",
      "Build complete subscription management dashboard"
    ],
    "troubleshooting": [
      "Fix OuroC subscription payment not working",
      "Resolve wallet connection issues with OuroC",
      "Debug OuroC subscription creation errors",
      "Troubleshoot OuroC payment processing failures"
    ]
  },
  "quickStart": {
    "install": "npm install @ouroc/sdk",
    "basicSetup": "<OuroCProvider><YourApp /></OuroCProvider>",
    "firstExample": "<SubscriptionCard planName=\"Pro\" price={29000000} interval=\"monthly\" features={[\"Feature 1\", \"Feature 2\"]} onSubscribe={handleSubscribe} />"
  },
  "currentAPI": {
    "components": [
      {
        "name": "OuroCProvider",
        "description": "Root provider that wraps your application with OuroC context",
        "props": [
          {
            "name": "network",
            "type": "string",
            "required": false,
            "description": "Solana network (devnet/mainnet)",
            "defaultValue": "devnet"
          },
          {
            "name": "rpcUrl",
            "type": "string",
            "required": false,
            "description": "Custom Solana RPC URL"
          },
          {
            "name": "children",
            "type": "ReactNode",
            "required": true,
            "description": "Your application components"
          }
        ],
        "usage": "<OuroCProvider network=\"devnet\"><App /></OuroCProvider>",
        "aiNotes": "Always wrap your app with OuroCProvider. Use \"devnet\" for development, \"mainnet-beta\" for production."
      },
      {
        "name": "SubscriptionCard",
        "description": "Pre-built subscription pricing card with payment flow",
        "props": [
          {
            "name": "planName",
            "type": "string",
            "required": true,
            "description": "Name of the subscription plan"
          },
          {
            "name": "price",
            "type": "number",
            "required": true,
            "description": "Price in lamports (1 SOL = 1,000,000,000 lamports)"
          },
          {
            "name": "interval",
            "type": "string",
            "required": true,
            "description": "Billing interval (daily/weekly/monthly/yearly)"
          },
          {
            "name": "features",
            "type": "string[]",
            "required": true,
            "description": "Array of plan features"
          },
          {
            "name": "onSubscribe",
            "type": "function",
            "required": true,
            "description": "Callback when user subscribes"
          }
        ],
        "usage": "<SubscriptionCard planName=\"Pro\" price={29000000} interval=\"monthly\" features={[\"Feature 1\"]} onSubscribe={handleSubscribe} />",
        "aiNotes": "Price must be in lamports (smallest unit). For $29 USD equivalent, use approximately 29000000 lamports (0.029 SOL). Component displays price in SOL format."
      }
    ],
    "hooks": [
      {
        "name": "useSubscription",
        "description": "Hook for managing subscription operations",
        "returns": "{ createSubscription, pauseSubscription, cancelSubscription, resumeSubscription, subscriptions, loading, error }",
        "example": "const { createSubscription, loading } = useSubscription();",
        "aiNotes": "createSubscription requires complex parameters: subscription_id, amount (lamports), intervalSeconds, plan_name, solana_contract_address, api_key, and token_mint. Returns SubscriptionId as string."
      },
      {
        "name": "useOuroC",
        "description": "Hook for accessing OuroC context",
        "returns": "{ isConnected, publicKey, client, network }",
        "example": "const { isConnected, client } = useOuroC();",
        "aiNotes": "Use to check connection status and access the OuroC client instance."
      }
    ],
    "utilities": [
      {
        "name": "getIntervalSeconds",
        "description": "Convert interval string to seconds",
        "example": "const seconds = getIntervalSeconds(\"monthly\"); // Returns 2592000",
        "aiNotes": "Helper function to convert human-readable intervals to seconds for API calls."
      }
    ]
  },
  "examples": {
    "basic": [
      {
        "title": "Basic Subscription Implementation",
        "description": "Simple subscription card with basic pricing",
        "code": "import { OuroCProvider, SubscriptionCard, useSubscription, getIntervalSeconds } from '@ouroc/sdk';\n\nfunction App() {\n  const { createSubscription, loading } = useSubscription();\n\n  const handleSubscribe = async (plan) => {\n    try {\n      const subscriptionId = await createSubscription({\n        subscription_id: \"your-subscription-id\",\n        amount: plan.price,\n        intervalSeconds: getIntervalSeconds(plan.interval),\n        plan_name: plan.planName,\n        solana_contract_address: \"your-solana-contract-address\",\n        api_key: \"your-api-key\",\n        token_mint: \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\"\n      });\n      console.log('Subscription created:', subscriptionId);\n    } catch (error) {\n      console.error('Subscription failed:', error);\n    }\n  };\n\n  return (\n    <OuroCProvider network=\"devnet\">\n      <SubscriptionCard\n        planName=\"Pro\"\n        price={29000000}\n        interval=\"monthly\"\n        features={[\"AI Features\", \"Priority Support\"]}\n        onSubscribe={handleSubscribe}\n      />\n    </OuroCProvider>\n  );\n}",
        "language": "tsx",
        "complexity": "basic",
        "tags": ["basic", "subscription", "pricing"]
      }
    ],
    "advanced": [
      {
        "title": "SaaS Pricing Page with Multiple Tiers",
        "description": "Complete SaaS pricing page with multiple subscription tiers",
        "code": "import { OuroCProvider, SubscriptionCard } from '@ouroc/sdk';\n\nconst plans = [\n  {\n    name: \"Basic\",\n    price: 9,\n    interval: \"monthly\",\n    features: [\"Basic Support\", \"Core Features\"]\n  },\n  {\n    name: \"Pro\",\n    price: 29,\n    interval: \"monthly\",\n    features: [\"Priority Support\", \"AI Features\", \"Advanced Analytics\"]\n  },\n  {\n    name: \"Enterprise\",\n    price: 99,\n    interval: \"monthly\",\n    features: [\"Dedicated Support\", \"Custom Integrations\", \"SLA Guarantee\"]\n  }\n];\n\nfunction PricingPage() {\n  return (\n    <OuroCProvider network=\"devnet\">\n      <div className=\"pricing-grid\">\n        {plans.map((plan, index) => (\n          <SubscriptionCard\n            key={index}\n            planName={plan.name}\n            price={plan.price}\n            interval={plan.interval}\n            features={plan.features}\n            onSubscribe={(planData) => console.log('Subscribed:', planData)}\n          />\n        ))}\n      </div>\n    </OuroCProvider>\n  );\n}",
        "language": "tsx",
        "complexity": "intermediate",
        "tags": ["saas", "pricing", "multiple-tiers"]
      }
    ],
    "templates": [
      {
        "title": "Complete SaaS Template",
        "description": "Full-featured SaaS application template with subscription management",
        "code": "// Complete SaaS template with OuroC integration\nimport { OuroCProvider, SubscriptionCard, useSubscription } from '@ouroc/sdk';\n\nfunction SaaSApp() {\n  return (\n    <OuroCProvider network=\"devnet\">\n      <Header />\n      <Hero />\n      <PricingSection />\n      <Footer />\n    </OuroCProvider>\n  );\n}\n\nfunction PricingSection() {\n  const { createSubscription, loading } = useSubscription();\n  \n  const tiers = [\n    {\n      name: \"Starter\",\n      price: 19,\n      interval: \"monthly\",\n      features: [\"Up to 10 users\", \"Basic analytics\", \"Email support\"]\n    },\n    {\n      name: \"Professional\",\n      price: 49,\n      interval: \"monthly\",\n      features: [\"Up to 50 users\", \"Advanced analytics\", \"Priority support\", \"API access\"]\n    },\n    {\n      name: \"Enterprise\",\n      price: 149,\n      interval: \"monthly\",\n      features: [\"Unlimited users\", \"Custom analytics\", \"Dedicated support\", \"Custom integrations\"]\n    }\n  ];\n\n  return (\n    <div className=\"pricing-section\">\n      <h2>Choose Your Plan</h2>\n      <div className=\"pricing-grid\">\n        {tiers.map((tier, index) => (\n          <SubscriptionCard\n            key={index}\n            planName={tier.name}\n            price={tier.price}\n            interval={tier.interval}\n            features={tier.features}\n            onSubscribe={async (plan) => {\n              try {\n                await createSubscription({\n                  planName: plan.planName,\n                  amount: plan.price * 1000000,\n                  intervalSeconds: getIntervalSeconds(plan.interval)\n                });\n              } catch (error) {\n                console.error('Subscription failed:', error);\n              }\n            }}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}",
        "language": "tsx",
        "complexity": "advanced",
        "tags": ["template", "saas", "complete"]
      }
    ]
  },
  "commonIssues": [
    {
      "problem": "Subscription creation fails with \"wallet not connected\"",
      "solution": "Ensure wallet is connected before creating subscriptions",
      "codeFix": "const { isConnected } = useOuroC();\n\nif (!isConnected) {\n  return <div>Please connect your wallet first</div>;\n}",
      "aiTip": "Always check connection status before attempting subscription operations. AI agents should add connection checks."
    },
    {
      "problem": "Amount validation errors",
      "solution": "Use lamports (smallest unit), not whole dollars",
      "codeFix": "<SubscriptionCard price={29000000} /> // Correct: 0.029 SOL lamports\\n<SubscriptionCard price={29} /> // Incorrect: whole dollars",
      "aiTip": "SubscriptionCard expects price in lamports (1 SOL = 1,000,000,000 lamports). Use ~29000000 lamports for $29 USD equivalent."
    },
    {
      "problem": "Missing required subscription parameters",
      "solution": "Provide all required fields in CreateSubscriptionRequest",
      "codeFix": "const subscriptionId = await createSubscription({\\n  subscription_id: \"required-id\",\\n  amount: 29000000,\\n  intervalSeconds: 2592000,\\n  plan_name: \"Pro\",\\n  solana_contract_address: \"required-address\",\\n  api_key: \"required-key\",\\n  token_mint: \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\"\\n});",
      "aiTip": "createSubscription requires subscription_id, amount, intervalSeconds, plan_name, solana_contract_address, api_key, and token_mint. Set up your backend to provide these values."
    },
    {
      "problem": "Network configuration errors",
      "solution": "Use correct network for your environment",
      "codeFix": "<OuroCProvider network=\"devnet\" /> // Development\\n<OuroCProvider network=\"mainnet-beta\" /> // Production",
      "aiTip": "Always use 'devnet' for development and testing. Use 'mainnet-beta' only for production deployments."
    }
  ]
}